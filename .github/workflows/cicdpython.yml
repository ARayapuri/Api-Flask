name: CI/CD Python Application

on:
 push:
 workflow_dispatch:

jobs:
 ci-cd:
  runs-on: ubuntu-latest
  env:
   DOCKER_IMAGE: karthikamn/flask-api-python-app
   SONAR_URL: ${{secrets.SONAR_URL}}
   SONAR_TOKEN1: ${{secrets.SONAR_TOKEN1}}
  steps:
    - name: Checkout Code
      uses: actions/checkout@v4.2.2
    - name: Official SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v3.0.0
      with:
       projectBaseDir: .
       args: >
        -Dsonar.projectKey=my-projectkey
        -Dsonar.host.url=${{env.SONAR_URL}}
        -Dsonar.login=${{env.SONAR_TOKEN1}}
        -Dsonar.working.directory=./.scannerwork
    - name: Print Sonar Logs
      run: |
       ls -al .scannerwork
       cat .scannerwork/report.task.txt||echo "report.task.txt not found"
    - name: Login to Docker
      uses: docker/login-action@v3.3.0
      with:
       username: ${{secrets.DOCKER_USERNAME1}}
       password: ${{secrets.DOCKER_PASSWORD1}}
    - name: Wait for SonarQube Quality Gate status
      id: quality_gate
      run: |
         echo "Checking quality gate status..."
          
          # Get the quality gate status from SonarQube
          status=$(curl -s -u ${{ secrets.SONAR_TOKEN }} "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=your_project_key" | jq -r '.projectStatus.status')
          
          echo "SonarQube Quality Gate Status: $status"
          
          if [[ "$status" != "OK" ]]; then
            echo "Quality gate failed!"
            exit 1
          fi

      env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Build docker image
      run: |
       docker build -t $DOCKER_IMAGE:${{github.sha}} .
       docker tag $DOCKER_IMAGE:${{github.sha}} $DOCKER_IMAGE:latest
    - name: Push docker image
      run: |
       docker push $DOCKER_IMAGE:${{github.sha}}
       docker push $DOCKER_IMAGE:latest
    - name: Setup Kubectl for kubernetes
      uses: azure/setup-kubectl@v3
      with:
       version: 'latest'
    - name: Setup Minikube
      run: |
       minikube start
       kubectl config use-context minikube
    - name: Deploy to Kubernetes
      run: |
       kubectl apply  -f k8s/deployment.yml
       kubectl apply -f k8s/service.yml
      
      
      
      
       
       
      
   
        
          
       
       
       
        
      
